[{"C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\App.js":"1","C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\index.js":"2","C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\components\\MenuTop\\MenuTop.js":"3","C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\components\\MenuTop\\index.js":"4","C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\components\\Gato\\Gato.js":"5","C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\components\\Gato\\index.js":"6"},{"size":9984,"mtime":1611157593240,"results":"7","hashOfConfig":"8"},{"size":530,"mtime":1611099712587,"results":"9","hashOfConfig":"8"},{"size":567,"mtime":1611065973873,"results":"10","hashOfConfig":"8"},{"size":34,"mtime":1611064499344,"results":"11","hashOfConfig":"8"},{"size":2880,"mtime":1611104549867,"results":"12","hashOfConfig":"8"},{"size":31,"mtime":1611063803743,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ollx7e",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\App.js",["27"],"C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\index.js",[],"C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\components\\MenuTop\\MenuTop.js",[],"C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\components\\MenuTop\\index.js",[],"C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\components\\Gato\\Gato.js",["28","29","30","31","32","33"],"import React, {useState} from 'react';\r\nimport {notification} from \"antd\";\r\n\r\nimport \"./Gato.scss\";\r\n\r\nfunction Square(props){\r\n    \r\n    return(\r\n        <button  className=\"square\" onClick={props.onClick}>\r\n            {props.value}  \r\n        </button>\r\n    );\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    /*Show all of the winning combinations (\"lines\") */\r\n    const lines = [\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6],\r\n    ];\r\n\r\n    for(let line of lines){\r\n        const [a,b,c] = line;\r\n        if(\r\n            squares[a] &&\r\n            squares[a] === squares[b] &&\r\n            squares [a] === squares[c]\r\n        ) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\n\r\nfunction Board (){\r\n    const initialSquares = Array(9).fill(null);\r\n    const [squares, setSquares] = useState(initialSquares);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n\r\n    const handleClick = i => {\r\n        const newSquares = [...squares];\r\n        console.log(newSquares);\r\n        const winnerDeclared = Boolean(calculateWinner (newSquares));\r\n        \r\n        const squareAlreadyFilled = Boolean(newSquares[i]);\r\n        if(winnerDeclared || squareAlreadyFilled) return;\r\n\r\n        newSquares[i] = xIsNext ? 'X' :'O';\r\n        setSquares(newSquares);\r\n        setXIsNext(!xIsNext);\r\n    }\r\n    const renderSquare = i => {\r\n        return(\r\n            <Square\r\n                value = {squares[i]}\r\n                onClick ={() => handleClick(i)}\r\n            />\r\n        );\r\n    };\r\n\r\n    const winner = calculateWinner(squares);\r\n    const status = winner ? (`Winner :  ${winner}`) \r\n    :( `Next player: ${xIsNext ? 'X': 'O'} `);\r\n    console.log(status, winner);\r\n    return(\r\n        <div className=\"gato\" >\r\n            <div className= \"gato__status\"><h3>{status}</h3></div>\r\n            <div className=\"gato__board-row\">\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n            <div className=\"gato__board-row\">\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n            <div className=\"gato__board-row\">\r\n                {renderSquare(6)}\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    );\r\n   \r\n}\r\n\r\nexport default function Gato(){\r\n    const initialHistory =[\r\n        { squares : Array(9).fill(null) }\r\n    ];\r\n    const [history, setHistory ] = useState(initialHistory);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    return(\r\n        <div className=\"game\">\r\n            <div className=\"game__board\">               \r\n                <Board />\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\corte\\Documents\\react\\cv\\cv-ana\\src\\components\\Gato\\index.js",[],{"ruleId":"34","severity":1,"message":"35","line":121,"column":41,"nodeType":"36","endLine":121,"endColumn":86},{"ruleId":"37","severity":1,"message":"38","line":2,"column":9,"nodeType":"39","messageId":"40","endLine":2,"endColumn":21},{"ruleId":"41","severity":1,"message":"42","line":33,"column":13,"nodeType":"43","messageId":"44","endLine":33,"endColumn":24,"fix":"45"},{"ruleId":"37","severity":1,"message":"46","line":102,"column":12,"nodeType":"39","messageId":"40","endLine":102,"endColumn":19},{"ruleId":"37","severity":1,"message":"47","line":102,"column":21,"nodeType":"39","messageId":"40","endLine":102,"endColumn":31},{"ruleId":"37","severity":1,"message":"48","line":103,"column":12,"nodeType":"39","messageId":"40","endLine":103,"endColumn":19},{"ruleId":"37","severity":1,"message":"49","line":103,"column":21,"nodeType":"39","messageId":"40","endLine":103,"endColumn":31},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'notification' is defined but never used.","Identifier","unusedVar","no-whitespace-before-property","Unexpected whitespace before property a.","MemberExpression","unexpectedWhitespace",{"range":"50","text":"51"},"'history' is assigned a value but never used.","'setHistory' is assigned a value but never used.","'xIsNext' is assigned a value but never used.","'setXIsNext' is assigned a value but never used.",[700,701],""]